//강의 17화~
//팩토리얼, 피보나치, 배열


//표쥰 입출력 함수 헤더 standard input output
#include <stdio.h>



/*
* <함수>
	 함수들이 사용하는 메모리 영역 =  스택 메모리 영역
	호출 스택이 뭔지 : 메모리 상황 보여줘

* factorial
* ex) 8!
* 코드 재사용하기 위해 함수 사용
*/


//int Factorial(int _iNum) //입력 변수명 횟수
//{
//	int iValue = 1;
//
//	for (int j = 0; j < _iNum - 1; ++j)
//	{
//		iValue *= (j + 2);
//	}
//
//	// Factorial(10); 
//		// 자기코드 안에 자기 함수 하나 더 호출 스택이 하나 더 생김, 
//		// 문제는 종료안되고 메인함수로 return안됨, stack overflow
//
//	return iValue;
//}


//위의 코드보다 이 코드가 좀 더 직관적
int Factorial(int _iNum) {
	int iValue = 1;

	for (int j = 1; j <= _iNum; ++j) {
		iValue *= j;
	}

	return iValue;
}



//강의 18화~
/*
* <재귀함수>
* 함수안에서 자기 자신 호출
* 동작 방식 이해도 중요
	* 장점: 가독성, 구현의 용이하고 직관적(프로그래밍 익숙해진 기준), 계층구조 하기 좋음
	* 단점: 성능이 많이 떨어짐 반복문 대체 가능(stack 이나 queue 사용)
*		stackoverflow 문제


*	재귀함수로 팩토리얼 구현해보기
	(Recursion 반복되는 재귀의)
*/
int Factorial_Re(int _iNum)
/*똑같이 내가 원하는 팩토리얼 값 넣어야*/
{
	if (1 == _iNum)
		/*if 조건이 참일 경우 1!요구*/
	{
		return 1;
		/*리턴구문 : 함수 스택 종료, 되돌려준 값은 1*/
	}
	return _iNum * Factorial_Re(_iNum - 1);
	/* 예를 들어 7! = 7 x 6! */
}


/* <피보나치 수열>
	(0) 1 1 2 3 5 8 13 21 34 55 ...
	0+1 1+1 1+2 ...
*/

int Fibonacci(int _iNum/*입력 값*/)
{
	if (1 == _iNum || 2 == _iNum) /*요구하는 숫자가 1이거나 2인 경우*/
	{
		return 1;
	}
	// 이전 변수
	int iPrev1 = 1;
	int iPrev2 = 1;
	int iValue = 0;

	for (int i = 0; i < _iNum - 2; ++i)
	{
		iValue = iPrev1 + iPrev2;
		iPrev1 = iPrev2;
		iPrev2 = iValue;
	}
	return iValue;
}

// 피보나치 수열 재귀함수로
int Fibonacci_Re(int _iNum)
{
	if (1 == _iNum || 2 == _iNum)
	{
		return 1;
	}
	return Fibonacci_Re(_iNum - 1) + Fibonacci_Re(_iNum - 2);
	// n번째항은 n-1번째 + n-2번째의 합
	// n = 10번째면, 9번째랑 8번째의 합
}



//출력

int main() /*팩토리얼 구현*/
{
	int iValue = Factorial(4);
	/* 함수안의 변수: 지역변수 */
	iValue = Factorial(10);
	iValue = Factorial_Re(10);


	int _iNum;

	// 피보나치 수열 계산
	printf("양의 정수 n번째 자리수를 입력하세요: ");
	scanf_s("%d", &_iNum);

	iValue = Fibonacci(_iNum);
	printf("피보나치(%d) = %d\n", _iNum, iValue);

	// 피보나치 수열 (재귀) 계산
	printf("(재귀)양의 정수 n번째 자리수를 입력하세요: ");
	scanf_s("%d", &_iNum);

	iValue = Fibonacci_Re(_iNum);
	printf("피보나치(%d) (재귀) = %d\n", _iNum, iValue);




	/*배열*//*20화*/

	/*개별 요소 접근, 5번째에 10 넣고 싶음,
	인덱스 접근, 배열 인덱스는 [0부터 시작, 1, 2, 3, ...9]
	iArray[10] = 10; // 는 틀림 인덱스 [9]까지만 접근
	인덱스 선언 항상 조심
	*/

	int iArray[10] = { };



	int iData = 100;
	int iArray2[100] = { };

	/*
	배열 쓰는 이유
		int 변수 10개 쓰고 싶은데 int i = 0;을 10개 쳐야함
		int iArray[10] = { };
		인트 자료형,배열 이름,10묶음 =  10개 각각 요소 초기값{}시 전체 전부 0으로  초기화
	*/




	/*포인터*/


	return 0;
}
